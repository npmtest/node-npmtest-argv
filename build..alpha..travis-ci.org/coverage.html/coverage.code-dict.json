{"/home/travis/build/npmtest/node-npmtest-argv/test.js":"/* istanbul instrument in package npmtest_argv */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-argv/lib.npmtest_argv.js":"/* istanbul instrument in package npmtest_argv */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_argv = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_argv = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-argv/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-argv && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_argv */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_argv\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_argv.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_argv.rollup.js'] =\n            local.assetsDict['/assets.npmtest_argv.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_argv.__dirname + '/lib.npmtest_argv.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-argv/node_modules/argv/index.js":"module.exports = require( './lib/argv.js' );\n","/home/travis/build/npmtest/node-npmtest-argv/node_modules/argv/lib/argv.js":"var PATH = require( 'path' ),\n\ttoString = Object.prototype.toString,\n\trhome = /^\\~\\//,\n\trroot = /^\\//,\n\trlistcsv = /^(list|csv)\\,[a-z]+$/,\n\trdash = /^\\-/,\n\trddash = /^\\-\\-/,\n\tristarget = /^[^\\-]/,\n\tSCRIPT_NAME = ( process.argv[ 1 ] || '' ).split( '/' ).pop(),\n\thelpOption = {\n\t\tname: 'help',\n\t\tshort: 'h',\n\t\ttype: function(){ return true; },\n\t\tdescription: 'Displays help information about this script',\n\t\texample: \"'\" + SCRIPT_NAME + \" -h' or '\" + SCRIPT_NAME + \" --help'\",\n\t\tonset: function( args ) {\n\t\t\tself.help( args.mod );\n\t\t\tprocess.exit( 0 );\n\t\t}\n\t},\n\tboolTest = function( value ) {\n\t\treturn value == 'true' || value == 'false' || value == '1' || value == '0';\n\t},\n\tself;\n\n// argv module\nmodule.exports = self = {\n\n\t// Default script name\n\tname: SCRIPT_NAME,\n\n\t// Default description to the triggered script 'node script'\n\tdescription: 'Usage: ' + SCRIPT_NAME + ' [options]',\n\n\t// Modules\n\tmods: {},\n\n\t// Shorthand options\n\tshort: { h: helpOption },\n\n\t// Options\n\toptions: { help: helpOption },\n\n\t// List of common types\n\ttypes: {\n\n\t\tstring: function( value ) {\n\t\t\treturn value.toString();\n\t\t},\n\n\t\tpath: function( value ) {\n\t\t\tvar end = value[ value.length - 1 ] == '/';\n\n\t\t\tif ( rhome.exec( value ) ) {\n\t\t\t\tvalue = PATH.normalize( process.env.HOME + '/' + value.replace( rhome, '' ) );\n\t\t\t}\n\t\t\telse if ( ! rroot.exec( value ) ) {\n\t\t\t\tvalue = PATH.normalize( process.cwd() + '/' + value );\n\t\t\t}\n\n\t\t\treturn value + ( end && value[ value.length - 1 ] != '/' ? '/' : '' );\n\t\t},\n\n\t\t'int': function( value ) {\n\t\t\treturn parseInt( value, 10 );\n\t\t},\n\n\t\t'float': function( value ) {\n\t\t\treturn parseFloat( value, 10 );\n\t\t},\n\n\t\t'boolean': function( value ) {\n\t\t\treturn ( value == 'true' || value === '1' );\n\t\t},\n\n\t\tlist: function( value, name, options ) {\n\t\t\tif ( ! options[ name ] ) {\n\t\t\t\toptions[ name ] = [];\n\t\t\t}\n\n\t\t\toptions[ name ].push( value );\n\t\t\treturn options[ name ];\n\t\t},\n\n\t\tcsv: function( value ) {\n\t\t\treturn value.split( ',' );\n\t\t},\n\n\t\t'listcsv-combo': function( type ) {\n\t\t\tvar parts = type.split( ',' ),\n\t\t\t\tprimary = parts.shift(),\n\t\t\t\tsecondary = parts.shift();\n\n\t\t\treturn function( value, name, options, args ) {\n\t\t\t\t// Entry is going to be an array\n\t\t\t\tif ( ! options[ name ] ) {\n\t\t\t\t\toptions[ name ] = [];\n\t\t\t\t}\n\n\t\t\t\t// Channel to csv or list\n\t\t\t\tif ( primary == 'csv' ) {\n\t\t\t\t\tvalue.split( ',' ).forEach(function( val ) {\n\t\t\t\t\t\toptions[ name ].push( self.types[ secondary ]( val, name, options, args ) );\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toptions[ name ].push( self.types[ secondary ]( value, name, options, args ) );\n\t\t\t\t}\n\n\t\t\t\treturn options[ name ];\n\t\t\t};\n\t\t}\n\n\t},\n\n\t// Creates custom type function\n\ttype: function( name, callback ) {\n\t\tif ( self.isObject( name ) ) {\n\t\t\tfor ( var i in name ) {\n\t\t\t\tif ( self.isFunction( name[ i ] ) ) {\n\t\t\t\t\tself.types[ i ] = name[ i ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if ( callback === undefined ) {\n\t\t\treturn self.types[ name ];\n\t\t}\n\t\telse if ( self.isFunction( callback ) ) {\n\t\t\tself.types[ name ] = callback;\n\t\t}\n\t\telse if ( callback === null && self.types.hasOwnProperty( name ) ) {\n\t\t\tdelete self.types[ name ];\n\t\t}\n\n\t\treturn self;\n\t},\n\n\t// Setting version number, and auto setting version option\n\tversion: function( v ) {\n\t\tself.option({\n\t\t\t_version: v,\n\t\t\tname: 'version',\n\t\t\ttype: function(){ return true; },\n\t\t\tdescription: 'Displays version info',\n\t\t\texample: self.name + \" --version\",\n\t\t\tonset: function( args ) {\n\t\t\t\tconsole.log( v + \"\\n\" );\n\t\t\t\tprocess.exit( 0 );\n\t\t\t}\n\t\t});\n\n\t\treturn self;\n\t},\n\n\t// Adding options to definitions list\n\toption: function( mod, object ) {\n\t\tif ( object === undefined ) {\n\t\t\tobject = mod;\n\t\t\tmod = undefined;\n\t\t}\n\n\t\t// Iterate over array for multi entry\n\t\tif ( self.isArray( object ) ) {\n\t\t\tobject.forEach(function( entry ) {\n\t\t\t\tself.option( mod, entry );\n\t\t\t});\n\t\t}\n\t\t// Handle edge case\n\t\telse if ( ! self.isObject( object ) ) {\n\t\t\tthrow new Error( 'No option definition provided' + ( mod ? ' for module ' + mod : '' ) );\n\t\t}\n\t\t// Handle module definition\n\t\telse if ( object.mod ) {\n\t\t\tself.mod( object );\n\t\t}\n\t\t// Correct the object\n\t\telse {\n\t\t\tif ( ! object.name ) {\n\t\t\t\tthrow new Error( 'No name provided for option' );\n\t\t\t}\n\t\t\telse if ( ! object.type ) {\n\t\t\t\tthrow new Error( 'No type proveded for option' );\n\t\t\t}\n\n\t\t\t// Attach tester for value on booleans\n\t\t\t// to avoid false targets\n\t\t\tobject.test = object.test || ( object.type == 'boolean' ? boolTest : null );\n\t\t\tobject.description = object.description || '';\n\t\t\tobject.type = self.isFunction( object.type ) ? object.type :\n\t\t\t\tself.isString( object.type ) && rlistcsv.exec( object.type ) ? self.types[ 'listcsv-combo' ]( object.type ) :\n\t\t\t\tself.isString( object.type ) && self.types[ object.type ] ? self.types[ object.type ] :\n\t\t\t\tself.types.string;\n\n\t\t\t// Apply to module\n\t\t\tif ( mod ) {\n\t\t\t\tif ( ! self.mods[ mod ] ) {\n\t\t\t\t\tself.mods[ mod ] = { mod: mod, options: {}, short: {} };\n\t\t\t\t}\n\n\t\t\t\t// Attach option to submodule\n\t\t\t\tmod = self.mods[ mod ];\t\n\t\t\t\tmod.options[ object.name ] = object;\n\n\t\t\t\t// Attach shorthand\n\t\t\t\tif ( object.short ) {\n\t\t\t\t\tmod.short[ object.short ] = object;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Apply to root options\n\t\t\telse {\n\t\t\t\tself.options[ object.name ] = object;\n\n\t\t\t\t// Attach shorthand option\n\t\t\t\tif ( object.short ) {\n\t\t\t\t\tself.short[ object.short ] = object;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn self;\n\t},\n\n\t// Creating module\n\tmod: function( object ) {\n\t\tvar mod;\n\n\t\t// Allow multi mod setup\n\t\tif ( self.isArray( object ) ) {\n\t\t\tobject.forEach(function( value ) {\n\t\t\t\tself.mod( value );\n\t\t\t});\n\t\t}\n\t\t// Handle edge case\n\t\telse if ( ! self.isObject( object ) ) {\n\t\t\tthrow new Error( 'No mod definition provided' );\n\t\t}\n\t\t// Force mod name\n\t\telse if ( ! object.mod ) {\n\t\t\tthrow new Error( \"Expecting 'mod' entry for module\" );\n\t\t}\n\t\t// Create object if not already done so\n\t\telse if ( ! self.mods[ object.mod ] ) {\n\t\t\tself.mods[ object.mod ] = { mod: object.mod, options: {}, short: {} };\n\t\t}\n\n\t\t// Setup\n\t\tmod = self.mods[ object.mod ];\n\t\tmod.description = object.description || mod.description;\n\n\t\t// Attach each option\n\t\tself.option( mod.mod, object.options );\n\n\t\treturn self;\n\t},\n\n\t// Cleans out current options\n\tclear: function(){\n\t\tvar version = self.options.version;\n\n\t\t// Clean out modes and reapply help option\n\t\tself.short = {};\n\t\tself.options = {};\n\t\tself.mods = {};\n\t\tself.option( helpOption );\n\n\t\t// Re-apply version if set\n\t\tif ( version ) {\n\t\t\tself.option( version );\n\t\t}\n\n\t\treturn self;\n\t},\n\n\t// Description setup\n\tinfo: function( mod, description ) {\n\t\tif ( description === undefined ) {\n\t\t\tself.description = mod;\n\t\t}\n\t\telse if ( self.mods[ mod ] ) {\n\t\t\tself.mods[ mod ] = description;\n\t\t}\n\n\t\treturn self;\n\t},\n\n\t// Prints out the help doc\n\thelp: function( mod ) {\n\t\tvar output = [], name, option;\n\n\t\t// Printing out just a module's definitions\n\t\tif ( mod && ( mod = self.mods[ mod ] ) ) {\n\t\t\toutput = [ '', mod.description, '' ];\n\n\t\t\tfor ( name in mod.options ) {\n\t\t\t\toption = mod.options[ name ];\n\n\t\t\t\toutput.push( \"\\t--\" +option.name + ( option.short ? ', -' + option.short : '' ) );\n\t\t\t\toutput.push( \"\\t\\t\" + option.description );\n\t\t\t\tif ( option.example ) {\n\t\t\t\t\toutput.push( \"\\t\\t\" + option.example );\n\t\t\t\t}\n\n\t\t\t\t// Spacing\n\t\t\t\toutput.push( \"\" );\n\t\t\t}\n\t\t}\n\t\t// Printing out just the root options\n\t\telse {\n\t\t\toutput = [ '', self.description, '' ];\n\n\t\t\tfor ( name in self.options ) {\n\t\t\t\toption = self.options[ name ];\n\n\t\t\t\toutput.push( \"\\t--\" +option.name + ( option.short ? ', -' + option.short : '' ) );\n\t\t\t\toutput.push( \"\\t\\t\" + option.description );\n\t\t\t\tif ( option.example ) {\n\t\t\t\t\toutput.push( \"\\t\\t\" + option.example );\n\t\t\t\t}\n\n\t\t\t\t// Spacing\n\t\t\t\toutput.push( \"\" );\n\t\t\t}\n\t\t}\n\n\t\t// Print out the output\n\t\tconsole.log( output.join( \"\\n\" ) + \"\\n\\n\" );\n\t\treturn self;\n\t},\n\n\t// Runs the arguments parser\n\t_run: function( argv ) {\n\t\tvar args = { targets: [], options: {} },\n\t\t\topts = self.options,\n\t\t\tshortOpts = self.short,\n\t\t\tskip = false;\n\n\t\t// Allow for passing of arguments list\n\t\targv = self.isArray( argv ) ? argv : process.argv.slice( 2 );\n\n\t\t// Switch to module's options when used\n\t\tif ( argv.length && ristarget.exec( argv[ 0 ] ) && self.mods[ argv[ 0 ] ] ) {\n\t\t\targs.mod = argv.shift();\n\t\t\topts = self.mods[ args.mod ].options;\n\t\t\tshortOpts = self.mods[ args.mod ].short;\n\t\t}\n\n\t\t// Iterate over arguments\n\t\targv.forEach(function( arg, i ) {\n\t\t\tvar peek = argv[ i + 1 ], option, index, value;\n\n\t\t\t// Allow skipping of arguments\n\t\t\tif ( skip ) {\n\t\t\t\treturn ( skip = false );\n\t\t\t}\n\t\t\t// Full option '--option'\n\t\t\telse if ( rddash.exec( arg ) ) {\n\t\t\t\targ = arg.replace( rddash, '' );\n\n\t\t\t\t// Default no value to true\n\t\t\t\tif ( ( index = arg.indexOf( '=' ) ) !== -1 ) {\n\t\t\t\t\tvalue = arg.substr( index + 1 );\n\t\t\t\t\targ = arg.substr( 0, index );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvalue = 'true';\n\t\t\t\t}\n\n\t\t\t\t// Be strict, if option doesn't exist, throw and error\n\t\t\t\tif ( ! ( option = opts[ arg ] ) ) {\n\t\t\t\t\tthrow \"Option '--\" + arg + \"' not supported\";\n\t\t\t\t}\n\n\t\t\t\t// Send through type converter\n\t\t\t\targs.options[ arg ] = option.type( value, arg, args.options, args );\n\n\t\t\t\t// Trigger onset callback when option is set\n\t\t\t\tif ( self.isFunction( option.onset ) ) {\n\t\t\t\t\toption.onset( args );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Shorthand option '-o'\n\t\t\telse if ( rdash.exec( arg ) ) {\n\t\t\t\targ = arg.replace( rdash, '' );\n\n\t\t\t\tif ( arg.length > 1 ) {\n\t\t\t\t\targ.split( '' ).forEach(function( character ) {\n\t\t\t\t\t\tif ( ! ( option = shortOpts[ character ] ) ) {\n\t\t\t\t\t\t\tthrow \"Option '-\" + character + \"' not supported\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\targs.options[ option.name ] = option.type( 'true', option.name, args.options, args );\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Ensure that an option exists\n\t\t\t\t\tif ( ! ( option = shortOpts[ arg ] ) ) {\n\t\t\t\t\t\tthrow \"Option '-\" + arg + \"' not supported\";\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check next option for target association\n\t\t\t\t\tif ( peek && option.test && option.test( peek, option.name, args.options, args ) ) {\n\t\t\t\t\t\tvalue = peek;\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( peek && ! option.test && ristarget.exec( peek ) ) {\n\t\t\t\t\t\tvalue = peek;\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue = 'true';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Convert it\n\t\t\t\t\targs.options[ option.name ] = option.type( value, option.name, args.options, args );\n\n\t\t\t\t\t// Trigger onset callback when option is set\n\t\t\t\t\tif ( self.isFunction( option.onset ) ) {\n\t\t\t\t\t\toption.onset( args );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Targets\n\t\t\telse {\n\t\t\t\targs.targets.push( arg );\n\t\t\t}\n\t\t});\n\n\t\treturn args;\n\t},\n\n\trun: function( argv ) {\n\t\ttry {\n\t\t\treturn self._run( argv );\n\t\t}\n\t\tcatch ( e ) {\n\t\t\tif ( ! self.isString( e ) ) {\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\tconsole.log( \"\\n\" + e + \". Trigger '\" + self.name + \" -h' for more details.\\n\\n\" );\n\t\t\tprocess.exit( 1 );\n\t\t}\n\t}\n\n};\n\n\n// Type tests\n\"Boolean Number String Function Array Date RegExp Object Error\".split(' ').forEach(function( method ) {\n\tif ( method == 'Array' ) {\n\t\treturn ( self.isArray = Array.isArray );\n\t}\n\telse if ( method == 'Error' ) {\n\t\tself.isError = function( object ) {\n\t\t\treturn object && ( object instanceof Error );\n\t\t};\n\n\t\treturn;\n\t}\n\n\tvar match = '[object ' + method + ']';\n\tself[ 'is' + method ] = function( object ) {\n\t\treturn object !== undefined && object !== null && toString.call( object ) == match;\n\t};\n});\n"}